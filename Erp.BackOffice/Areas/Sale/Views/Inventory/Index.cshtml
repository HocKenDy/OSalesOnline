@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Sale.Models
@using Erp.BackOffice.Helpers
@using GridMvc.Html
@using Erp.BackOffice.Areas.Cms.Models
@model IndexViewModel<ProductViewModel>

@{
    ViewBag.Title = Wording.PageIndex_Inventory;
    Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "Inventory",
        ActionName = "Index",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = true,
        IsPopup = false,
        DisplayBackButton = false
    };
    var url = Request.Url;
    List<WarehouseViewModel> warehouseList = (List<WarehouseViewModel>)ViewBag.warehouseList;
    List<InventoryViewModel> inventoryList = (List<InventoryViewModel>)ViewBag.inventoryList;
    List<string> listcheck = (List<string>)ViewBag.listcheck;
    string category = Request["category"] != null ? Request["category"] : "";
    string group = Request["group"] != null ? Request["group"] : "";
    string manufacturer = Request["manufacturer"] != null ? Request["manufacturer"] : "";
    List<CategoryViewModel> Category = (List<CategoryViewModel>)ViewBag.Category;
    var color_Inventory = Common.GetSetting("Color_Inventory");
    var color_MinInventory = Common.GetSetting("Color_MinInventory");
    var color_MinInventoryAlarms = Common.GetSetting("Color_MinInventoryAlarms");

}
<link href="~/assets/css/bootstrap-multiselect.min.css" rel="stylesheet" />
<link href="~/assets/css/select2.min.css" rel="stylesheet" />
<style type="text/css">
    thead, tbody {
        display: block;
    }

    tbody {
        overflow-y: auto; /* Trigger vertical scroll    */
        overflow-x: hidden; /* Hide the horizontal scroll */
    }

    .table > tbody > tr > td, .table > tbody > tr > th, .table > tfoot > tr > td, .table > tfoot > tr > th, .table > thead > tr > td, .table > thead > tr > th {
        vertical-align: middle;
    }

    .page-content {
    }

    .btn.active {
        background-color: #428BCA !important;
        border-color: #428BCA !important;
    }
</style>

<link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"> </script>

@helper BuildCheckAll()
{
    <label>
        <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
        <span class="lbl"></span>
    </label>
}
@helper BuildColorInventory(int? productQtyOfWH, int? MinInventory, int? MinInventoryAlarms, string color_Inventory, string color_MinInventory, string color_MinInventoryAlarms)
{
if (productQtyOfWH < MinInventory && MinInventoryAlarms < productQtyOfWH)
{
        <span style="color:@(color_MinInventory)">@Common.PhanCachHangNgan(productQtyOfWH)</span>
}
else if (MinInventoryAlarms > productQtyOfWH)
{
        <span style="color:@(color_MinInventoryAlarms)">@Common.PhanCachHangNgan(productQtyOfWH)</span>
}
else
{
        <span style="color:@(color_Inventory)">@Common.PhanCachHangNgan(productQtyOfWH)</span>
}
}

@using (Html.BeginPageHeaderContainer(pageSetting))
{
    <p>
        @Html.Hidden("status_check", Request["status_check"])
        @Html.ListBox("status_checkId", SelectListHelper.GetSelectList_Category("Categories_product", null, null), new { @class = "multiselect", multiple = "" })
        @Html.TextBox("txtCode", Request["txtCode"], new { autocomplete = "off", placeholder = "Mã sản phẩm..." })
        @Html.TextBox("txtSearch", Request["txtSearch"], new { autocomplete = "off", placeholder = "Tên sản phẩm..." })
        @*@Html.DropDownList("group", SelectListHelper.GetSelectList_Category("ProductGroup", group, "- Nhóm sản phẩm -"))*@
        @Html.DropDownList("category", SelectListHelper.GetSelectList_Category("product", category, "- Danh mục sản phẩm -"))
        @Html.DropDownList("manufacturer", SelectListHelper.GetSelectList_Category("manufacturerList", manufacturer, "- Nhà sản xuất -"))
        <select id="status" name="status">
            <option @(Request["status"] == "" ? "selected" : "") value="">- Mức tồn -</option>
            <option @(Request["status"] == "Inventory" ? "selected" : "") value="Inventory">Tồn kho</option>
            <option @(Request["status"] == "MinInventory" ? "selected" : "") value="MinInventory">Tồn kho tối thiểu</option>
            <option @(Request["status"] == "MinInventoryAlarms" ? "selected" : "") value="MinInventoryAlarms">Tồn kho báo động</option>
        </select>
    </p>
    @*<p class="pull-right" id="status">
            <span data-toggle="buttons" class="btn-group">
                @for (int i = 0; i < Category.Count(); i++)
                {
                    var check = listcheck.Where(x => x.ToString() == Category[i].Value.ToString()).Count();
                    <label class="btn btn-sm @(check>0?"active":"")" id="label_@i" data-toggle="tooltip" title="@Category[i].Name" style="padding: 2px 9px !important;">
                        <input type="checkbox" value="@Category[i].Value" id="status_check" name="status_check" @(check > 0 ? "checked" : "")>
                        <i class="icon-only ace-icon @Category[i].Description bigger-110"></i> @Category[i].Name
                    </label>
                }
            </span>
        </p>*@
}

@if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage != "")
{
    <div class="alert alert-block alert-success">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-check green"></i>
        @Html.Raw(ViewBag.SuccessMessage)
    </div>
}

@if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
{
    <div class="alert alert-block alert-danger">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-warning red"></i>
        @ViewBag.FailedMessage
    </div>
}

<div class="table-responsive">
    <div class="grid-mvc" data-lang="en" data-gridname="" data-selectable="true" data-multiplefilters="false">
        <div class="grid-wrap">
            <table id="cTable" class="table table-striped grid-table">
                <thead>
                    <tr>
                        <th class="grid-header" style="width:40px;"><div class="grid-header-title"><span>STT</span></div></th>
                        <th class="grid-header" style="width:100px;"><div class="grid-header-title"><span>Mã sản phẩm</span></div></th>
                        <th class="grid-header" style="width:400px;"><div class="grid-header-title"><span>Tên sản phẩm</span></div></th>
                        @foreach (var warehouse in warehouseList)
                        {
                            <th class="grid-header" style="width:150px;"><div class="grid-header-title"><span>@warehouse.Name</span></div></th>
                        }
                        <th class="grid-header" style="width:80px;"><div class="grid-header-title"><span>Tổng tồn</span></div></th>
                        <th class="grid-header" style="width:100px;"><div class="grid-header-title"><span>Giá trị tồn</span></div></th>

                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.Items)
                    {
                        int index = Model.Items.IndexOf(item);

                        <tr class="grid-row">
                            <td class="grid-cell" data-name="" style="width:40px;">@Model.Pager.GetOrderNoNumber(index)</td>
                            <td class="grid-cell" data-name="" style="width:100px;">@item.Code</td>
                            <td class="grid-cell" data-name="" style="width:400px;"><a onclick="OpenPopup('@Url.Action("Detail", new { Id = item.Id })', 'Lịch sử xuất/nhập kho', 500, 700)">@item.Name</a></td>
                            @foreach (var warehouse in warehouseList)
                            {
                                var productOfWH = inventoryList.Where(x => x.ProductId == item.Id && x.WarehouseId == warehouse.Id);
                                if (productOfWH.Count() != 0)
                                {
                                    int? productQtyOfWH = productOfWH.Sum(x => x.Quantity);
                                    <td class="grid-cell text-right" style="width:150px; font-weight:bold">
                                        @Html.Raw(BuildColorInventory(productQtyOfWH, item.MinInventory, item.MinInventoryAlarms, color_Inventory, color_MinInventory, color_MinInventoryAlarms))
                                    </td>
                                }
                                else
                                {
                                    <td class="grid-cell text-right red" style="width: 150px; font-weight: bold">0</td>
                                }
                            }
                            <td class="grid-cell text-right" data-name="" style="width:80px; font-weight:bold">@Common.PhanCachHangNgan(inventoryList.Where(x => x.ProductId == item.Id).Sum(x => x.Quantity))</td>
                            <td class="grid-cell text-right" data-name="" style="width:100px; font-weight:bold">@Common.PhanCachHangNgan(inventoryList.Where(x => x.ProductId == item.Id).Sum(x => x.Quantity) * item.PriceInbound)</td>
                        </tr>
                    }

                </tbody>
            </table>
            <div class="grid-footer">
                @Html.Raw(Model.Pager.Paging(Request.Url.ToString()))
            </div>

        </div>
    </div>
</div>

@*@using (Html.BeginButtonContainer(pageSetting))
{
    if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("UpdateAll", "Inventory", "Sale"))
    {
        using (Html.BeginForm("UpdateAll", "Inventory", FormMethod.Post))
        {
            @Html.Hidden("url", url)
            <button class="btn btn-mini btn-primary" type="submit" name="Submit" value="Save">
                <i class="ace-icon fa fa-save"></i>
                Đồng bộ kho
            </button>
        }
    }
}*@

@section Scripts {
    <script src="~/assets/js/bootstrap-multiselect.min.js"></script>
    <script src="~/assets/js/select2.min.js"></script>
    <script type="text/javascript">
        $(function ()
        {
            $("table tbody").height($(window).height() - $("table tbody").position().top - 170);
            $('#status_checkId').multiselect('destroy');
            $('#status_checkId').multiselect({
                enableFiltering: true,
                //includeSelectAllOption: true,
                buttonClass: 'btn btn-white',
                nonSelectedText: 'Loại nhà kho',
                allSelectedText: 'Tất cả loại kho',
                templates: {
                    button: '<button type="button" class="multiselect dropdown-toggle" style="min-width: 124px;height: 27px;margin-bottom: 4px;" data-toggle="dropdown"><span class="multiselect-selected-text"></span><b class="fa fa-caret-down"></b></button>',
                    ul: '<ul class="multiselect-container dropdown-menu"></ul>',
                    filter: '<li class="multiselect-item filter"><div class="input-group"><span class="input-group-addon" style="padding: 0px 8px"><i class="fa fa-search"></i></span><input class="form-control multiselect-search" type="text" style="min-width: 180px;"></div></li>',
                    filterClearBtn: '<span class="input-group-btn"><button class="btn btn-default btn-white btn-grey multiselect-clear-filter" type="button" style="height: 27px;line-height: 13px;margin-bottom: 1px;"><i class="fa fa-times-circle red2"></i></button></span>',
                    li: '<li class="house-item"><a href="javascript:void(0);"><label></label></a></li>',
                    divider: '<li class="multiselect-item divider"></li>',
                    liGroup: '<li class="multiselect-item group"><label class="multiselect-group"></label></li>'
                },
                onChange: function (element, checked)
                {
                    $("#status_check").val('');
                    $('#status_checkId option:selected').each(function ()
                    {
                        $("#status_check").val($("#status_check").val() + $(this).val() + ", ");
                    })
                }
            });
        });

        function CheckIsval()
        {
            if ($('[name="DeleteId-checkbox"]').is(':checked') == false)
            {
                alert("Phải chọn ít nhất 1 item.");
                return false;
            }
            else
            {
                if (confirm('Bạn có chắc muốn xóa các item đã chọn ?'))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
        }

        $('[name="Delete"]').click(function ()
        {
            if (confirm('Bạn có chắc muốn xóa item ?'))
            {
                $(this).closest('tr').children('td').each(function (i, e)
                {
                    $(this).find("input.class-delete-all").prop("checked", true);
                    return true;
                })
            }
            else
            {
                return false;
            }

        })



    </script>
}