@model IEnumerable<ProductViewModel>

    @using Erp.BackOffice.App_GlobalResources
    @using Erp.BackOffice.Sale.Models
    @using Erp.BackOffice.Helpers
    @using GridMvc.Html

    @{
        ViewBag.Title = "Danh mục quà tặng";
        Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
        Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
        {
            ModuleName = "Gift",
            ActionName = "Index",
            PageTitle = ViewBag.Title,
            DisplaySearchPanel = true,
            IsPopup = false,
            DisplayBackButton = false,
        };
    }

    @helper GridColumnCommand(int id)
    {
        if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Edit", "Gift", "Sale"))
        {
            <a class="btn btn-mini btn-success" href="@Url.Action("Edit", "Gift", new { Id = id })">
                <i class="ace-icon fa fa-edit"></i>
            </a>
        }
        if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Delete", "Gift", "Sale"))
        {
            <button name="Delete" value="Delete" type="submit" class="btn btn-minier btn-danger">
                <i class="ace-icon fa fa-trash"></i>
            </button>
        }

    }

    @helper GridColumnName(string productCode, string name, int id, string categoryCode, string unit, string size)
    {
        name = string.IsNullOrEmpty(name) ? "No Title" : name;
        <a onclick="OpenPopup('@Url.Action("Detail", "Gift", new { Id = id, IsPopup = true})','',0,0)"><b>@name</b></a><br />

    }

    @helper GridColumnCategoryCode(string productCode, string categoryCode)
    {
        <b style="font-size:10px">@categoryCode</b>
    }

    @helper GridColumnCategoryValue(object value)
    {
        var attr = Erp.BackOffice.Helpers.Common.GetCategoryByValueOrId("value", value);
        <span>@(attr != null ? attr.Name : "")</span>
    }

    @helper CheckDeleteColumns(int Id)
    {
        <label>
            <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
            <span class="lbl"></span>
        </label>
    }

    @helper BuildCheckAll()
    {
        <label>
            <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
            <span class="lbl"></span>
        </label>
    }
    @helper GridColumnPoint(double? targetPoint, int? point)
    {
        if (targetPoint > 0 && point > 0)
        {
            <span>Cứ @Common.PhanCachHangNgan(targetPoint) đ/@Common.PhanCachHangNgan(point) điểm </span>
        }
        else
        {
            <i>(Chưa thiết lập)</i>
        }
    }

    @using (Html.BeginPageHeaderContainer(pageSetting))
    {
        <p>
            @Html.TextBox("txtCode", Request["txtCode"], new { autocomplete = "off", placeholder = "Mã quà tặng" })
            @Html.TextBox("txtSearch", Request["txtSearch"], new { autocomplete = "off", placeholder = "Tên quà tặng" })
            @Html.DropDownList("CategoryCode", SelectListHelper.GetSelectList_Category("Category_gift", Request["CategoryCode"], "Value", null), "Danh mục", new Dictionary<string, object> { { "class", "" }, { "data-val-required", "Bắt buộc chọn." } })
        </p>
    }

    @if (ViewBag.errors != null && ViewBag.errors != "")
    {
        <div class="alert alert-block alert-success">
            <button class="close" data-dismiss="alert" type="button">
                <i class="ace-icon fa fa-times"></i>
            </button>
            <i class="ace-icon fa fa-check green"></i>
            @ViewBag.errors
        </div>
    }
    @if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
    {
        <div class="alert alert-block alert-danger">
            <button class="close" data-dismiss="alert" type="button">
                <i class="ace-icon fa fa-times"></i>
            </button>
            <i class="ace-icon fa fa-warning red"></i>
            @ViewBag.FailedMessage
        </div>
    }
    @using (Html.BeginForm("Delete", "Gift", FormMethod.Post))
    {
        <div class="table-responsive">
            @Html.Grid(Model).Columns(columns =>
       {
           columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(40).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
           columns.Add(u => u.Code).Titled("Mã quà tặng").SetWidth(100);
           columns.Add(u => u.CategoryCode).Titled("Danh mục").SetWidth(100).Css("text-center");
           columns.Add().Titled(Wording.Name).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Code, u.Name, u.Id, u.CategoryCode, u.Unit, u.Size));
           columns.Add(u => u.Unit).Titled(Wording.Unit).SetWidth(80).Css("text-center");
           columns.Add().Titled(Wording.PriceInbound).SetWidth(100).RenderValueAs(u => Common.PhanCachHangNgan(u.PriceInbound)).Css("text-right");
           columns.Add().Titled(Wording.PriceOutbound).SetWidth(100).RenderValueAs(u =>Common.PhanCachHangNgan(u.PriceOutbound)).Css("text-right");
           columns.Add().Titled(Wording.RedemptionPoints).SetWidth(100).RenderValueAs(u => Common.PhanCachHangNgan(u.RedemptionPoints)).Css("text-right");
           columns.Add(u => u.CreatedDate).Titled(Wording.CreatedDate).SetWidth(130).Format("{0:dd/MM/yyyy HH:mm}");
           columns.Add(u => u.ModifiedDate).Titled(Wording.ModifiedDate).Sortable(true).Format("{0:dd/MM/yyyy HH:mm}").SetWidth(130);
           columns.Add(u => u.Id).Titled(Wording.Action).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCommand(u.Id)).SetWidth(85);
       }).WithPaging(50)
        </div>
        using (Html.BeginButtonContainer(pageSetting))
        {
            <a class="btn btn-mini btn-primary" href="@Url.Action("Create", pageSetting.ModuleName)">
                <i class="ace-icon fa fa-plus"></i>
                @Wording.CreateNew
            </a>
        }
    }

    @section Scripts {

        <script type="text/javascript">
            function CheckIsval() {
                if ($('[name="DeleteId-checkbox"]').is(':checked') == false) {
                    alert("Phải chọn ít nhất 1 item.");
                    return false;
                }
                else {
                    if (confirm('Bạn có chắc muốn xóa các item đã chọn ?')) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
            }

            $('[name="Delete"]').click(function () {
                if (confirm('Bạn có chắc muốn xóa item ?')) {
                    $(this).closest('tr').children('td').each(function (i, e) {
                        $(this).find("input.class-delete-all").prop("checked", true);
                        return true;
                    })
                }
                else {
                    return false;
                }

            })

        </script>
    }
