@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Helpers
@using Erp.BackOffice.Sale.Models
@using Erp.Domain.Sale.Entities

@model ProductViewModel

@{
    ViewBag.Title = "Cập nhật quà tặng";

    Layout = "~/Views/Shared/" + (Request["IsPopup"] == null ? "ACE_AdminLayout.cshtml" : "_PopupLayout.cshtml");
    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "Gift",
        ActionName = "Edit",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = false,
        IsPopup = false,
        DisplayBackButton = true
    };
    IEnumerable<SelectListItem> productUnitList = Erp.BackOffice.Helpers.Common.GetSelectList_Category("productUnit", null, "value");
    IEnumerable<SelectListItem> CategoryListGift = Erp.BackOffice.Helpers.Common.GetSelectList_Category("Category_gift", null, "value");
}

@section HeadOfPage {
    @Html.ScriptTop_ChosenStyle()
    <style>

        .imageClass {
            max-width: 100%;
            max-height: 140px;
        }
    </style>
}
@if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
{
    <div class="alert alert-block alert-danger">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-warning red"></i>
        @ViewBag.FailedMessage
    </div>
}
<div class="text-danger">@ViewBag.errors</div>
@using (Html.BeginPageHeaderContainer(pageSetting))
{

}
@using (Html.BeginForm_AceStyle((string)ViewBag.Title, "Edit", "Gift", null, FormMethod.Post, new { id = "EditProduct", @class = "form-horizontal clearfix", enctype = "multipart/form-data" }))
{
    @Html.ValidationSummary(true)
    <input type="hidden" name="IsPopup" value="@Request["IsPopup"]" />
    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.CreatedUserId)
    @Html.HiddenFor(model => model.CreatedDate)
    @Html.HiddenFor(model => model.IsDeleted)
    @Html.HiddenFor(model => model.Image_Name)
    @Html.HiddenFor(model => model.Type)

    <div class="row">
        <div class="col-sm-6">
            @Html.CustomTextboxFor(model => model.Code, null, null, WidthType.span12)
            @Html.CustomTextboxFor(model => model.Name, null, null, WidthType.span12)
            @Html.CustomDropDownListFor(model => model.Unit, productUnitList, WidthType.span12, true, null, DropdownListStyle.DropdownListStyleDefault)
            @Html.CustomDropDownListFor(model => model.CategoryCode, CategoryListGift, WidthType.span12, true, null, DropdownListStyle.DropdownListStyleDefault)
            @Html.CustomTextboxFor(model => model.PriceInbound, null, null, WidthType.span12, true, new Dictionary<string, object> { { "class", "col-sm-12 text-right" } })
            @Html.CustomTextboxFor(model => model.PriceOutbound, null, null, WidthType.span12, true, new Dictionary<string, object> { { "class", "col-sm-12 text-right" } })
            @Html.CustomTextboxFor(model => model.MinInventory, null, null, WidthType.span12, true, new Dictionary<string, object> { { "class", "col-sm-12 text-right" } })
            @Html.CustomTextboxFor(model => model.MinInventoryAlarms, null, null, WidthType.span12, true, new Dictionary<string, object> { { "class", "col-sm-12 text-right" } })
            @Html.CustomTextboxFor(model => model.RedemptionPoints, null, null, WidthType.span12, true, new Dictionary<string, object> { { "class", "col-sm-12 text-right" } })
        </div>
        <div class="col-sm-6">
            <div class="wrap-btn-upload">
                <a class="btn btn-primary btn-sm"><i class="fa fa-upload"></i><span>Tải hình mới</span></a>
                <input type="file" id="file-image" name="file-image" class="file-image" onchange="previewFileImage(event, '#display-image img')" />
            </div>
            <div class="text-center" id="display-image">
                <img class="imageClass" src="@(string.IsNullOrEmpty(Model.Image_Name) ? "/assets/css/images/noimage.gif" : "/files/product/" + Model.Image_Name)" title="@Model.Name" id="" />
            </div>
        </div>
    </div>
    using (Html.BeginButtonContainer(pageSetting))
    {
        <button class="btn btn-mini btn-primary" type="submit" name="Submit" value="Save">
            <i class="ace-icon fa fa-save"></i>
            @Wording.Save
        </button>
    }
}

@section Scripts {
    @*<link href="/Scripts/ckeditor/contents.css" rel="stylesheet" />
        <script src="/Scripts/ckeditor/ckeditor.js"></script>*@
    <script>
        $(document).ready(function () {
            $('#PriceInbound').numberFormat();
            $('#PriceOutbound').numberFormat();
            $('#MinInventory').numberFormat();
            $('#MinInventoryAlarms').numberFormat();
            $('#TargetPoint').numberFormat();
            $('#Point').numberFormat();
            $("#mask-PriceInbound,#mask-PriceOutbound,#mask-MinInventory,#mask-MinInventoryAlarms,#mask-TargetPoint, #mask-Point").focus(function ()
            {
                $(this).select();
            });
            $('#CategoryCode').change(function () {
                var $this = $(this);
                $('.list-attr-by-category').html('');
                $.get('/ObjectAttribute/GetListByModuleCategory', { category: $this.val(), objectId: @Model.Id, column:'col-sm-6' }, function (res) {
                    if(res.replace(/\s+/,'') != ''){
                        $('.list-attr-by-category').html(res);
                        initDataTypeInput($('.list-attr-by-category input'));
                        $('.box-attr').show();
                    }
                });
            });

            resetLableRequired('#EditProduct');
            //parseValidatorForm('#ProductInBound');
            $('#EditProduct').submit(function () {
                ShowLoading();
                if ($(this).valid()) {
                    if (checkFieldLiveRequired($(this)) == true) {
                        return true;
                    }
                }
                HideLoading(); return false;
            });

            //init
            $('#CategoryCode').trigger('change');

            //$("#Code").change(function () {
            //    $.get('/Product/CheckCodeExsist/' + $(this).val(), function (rs) {
            //        if(rs != '')
            //        {
            //            alert(rs);
            //        }
            //    });
            //});
        });

        @*function initCkeditor() {
            $('.ckeditor').ckeditor({
                "extraPlugins": 'imagebrowser',
                "imageBrowser_listUrl": "@Url.Action("ListJson","Images")",
                // Define the toolbar groups as it is a more accessible solution.
                toolbarGroups: [
                    { "name": "document", "groups": ["mode", "document", "doctools"] },
                    { "name": "editing", "groups": ["find", "selection", "spellchecker"] },
                    { "name": "forms" },
                    { "name": "tools" },
                    { "name": "basicstyles", "groups": ["basicstyles", "cleanup"] },
                    { "name": "clipboard", "groups": ["clipboar", "undo"] },
                    { "name": "links", "groups": ["links"] },
                    { "name": "paragraph", "groups": ["list", "blocks"] },
                    { "name": "insert", "groups": ["insert"] },
                    { "name": "styles", "groups": ["styles"] },
                    //{ "name": "about", "groups": ["about"] },
                    { "name": "styles" },
                    { "name": "colors" },
                    { "name": "align", "groups": ['JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'] }

                ],
                // Remove the redundant buttons from toolbar groups defined above.
                removeButtons: 'Underline,Strike,Subscript,Superscript,Anchor,Styles,Specialchar'
            });
        }*@
    </script>
    @Html.ScriptBottom_ValidationMvc()
    @Html.ScriptBottom_ChosenStyle()
}
