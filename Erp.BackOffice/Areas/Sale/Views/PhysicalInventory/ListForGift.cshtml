@model IQueryable<PhysicalInventoryViewModel>

@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Sale.Models
@using Erp.BackOffice.Helpers
@using GridMvc.Html

@{
    ViewBag.Title = Wording.PageIndex_PhysicalInventory;
    Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "PhysicalInventory",
        ActionName = "ListForGift",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = true,
        IsPopup = false,
        DisplayBackButton = false
    };
    int rowNumber = 0;
    int numberOfItem = 30;
    int currentPage = Request["grid-page"] != null ? Convert.ToInt32(Request["grid-page"]) : 1;
}

@if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage != "")
{
    <div class="alert alert-block alert-success">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-check green"></i>
        @ViewBag.SuccessMessage
    </div>
}

@if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
{
    <div class="alert alert-block alert-danger">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-warning red"></i>
        @ViewBag.FailedMessage
    </div>
}

<link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"></script>

@helper GridColumnName(string name, int id)
{
name = string.IsNullOrEmpty(name) ? "No Title" : name;
    <a href="@Url.Action("Detail", "PhysicalInventory", new { Id = id })">@name</a>
}
@helper GridColumnIsExchange(bool? IsExchange)
{
if (IsExchange == false)
{
        <span class="label label-danger">Chưa xử lý</span>
}
else
{
        <span class="label label-success">Đã xử lý</span>
}
}
@helper GridColumnProductInboundCode(string Code)
{
    <a onclick="OpenPopup('@Url.Action("Detail", "ProductInBound", new { area="Sale", TransactionCode = Code, IsPopup = true })', '', 0, 0)">@Code</a>
}
@helper GridColumnProductOutboundCode(string Code)
{
    <a onclick="OpenPopup('@Url.Action("Detail", "ProductOutbound", new { area="Sale", TransactionCode = Code, IsPopup = true })', '', 0, 0)">@Code</a>
}
@helper GridColumnNote(string Note, string CanCancelReason, bool? isdelete)
{
if (isdelete == true)
{
    string.Concat(Note, " ( ", CanCancelReason, " )");
}
else
{
        @Note
}

}
@helper CheckDeleteColumns(int Id)
{
    <label>
        <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
        <span class="lbl"></span>
    </label>
}

@helper BuildCheckAll()
{
    <label>
        <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
        <span class="lbl"></span>
    </label>
}

@using (Html.BeginPageHeaderContainer(pageSetting))
{
    <p>
        @Html.TextBox("txtSearch", Request["txtSearch"], new { autocomplete = "off", placeholder = "Nhập mã..." })
        @Html.DropDownList("WarehouseId", SelectListHelper.GetSelectList_Warehouse(Request["WarehouseId"], Common.CurrentUser.BranchId, "- Kho -"), new { autocomplete = "off", })
    </p>
}

@using (Html.BeginForm("Delete", "PhysicalInventory", FormMethod.Post))
{
    @Html.Grid(Model).Columns(columns =>
    {
        columns.Add().Titled("#").SetWidth(50).RenderValueAs(o =>
        {
        rowNumber++;
        return @<text> @(rowNumber + ((currentPage - 1) * numberOfItem)) </text>;
        });
        columns.Add().Titled(Wording.Status).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnIsExchange(u.IsExchange)).SetWidth(100);
        columns.Add(u => u.BranchName).Titled(Wording.BranchName).SetWidth(100);
        columns.Add().Titled("Mã đợt kiểm kê").Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Code, u.Id)).SetWidth(120);
        columns.Add(u => u.WarehouseName).Titled(Wording.Warehouse).SetWidth(150);
        columns.Add().Titled(Wording.ProductInboundCode).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnProductInboundCode(u.ProductInboundCode)).SetWidth(120);
        columns.Add().Titled(Wording.ProductOutboundCode).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnProductOutboundCode(u.ProductOutboundCode)).SetWidth(120);
        columns.Add().Titled(Wording.Note).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnNote(u.Note, u.CancelReason, u.IsDeleted));
        columns.Add().Titled(Wording.CreatedUserName).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => u.CreatedUserName).SetWidth(100);
        columns.Add(u => u.CreatedDate).Titled(Wording.CreatedDate).SetWidth(130).Format("{0:dd/MM/yyyy HH:mm}");
        columns.Add(u => u.ModifiedDate).Titled(Wording.ModifiedDate).SetWidth(130).Sortable(true).Format("{0:dd/MM/yyyy HH:mm}");
    }).WithPaging(20)

    using (Html.BeginButtonContainer(pageSetting))
    {
        <a class="btn btn-mini btn-primary" href="@Url.Action("CreateForGift", pageSetting.ModuleName)">
            <i class="ace-icon fa fa-plus"></i>
            @Wording.CreateNew
        </a>
    }
}



@section Scripts {
    <script type="text/javascript">
        function CheckIsval()
        {
            if ($('[name="DeleteId-checkbox"]').is(':checked') == false)
            {
                alert("Phải chọn ít nhất 1 item.");
                return false;
            }
            else
            {
                if (confirm('Bạn có chắc muốn xóa các item đã chọn ?'))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
        }

        $('[name="Delete"]').click(function ()
        {
            if (confirm('Bạn có chắc muốn xóa item ?'))
            {
                $(this).closest('tr').children('td').each(function (i, e)
                {
                    $(this).find("input.class-delete-all").prop("checked", true);
                    return true;
                })
            }
            else
            {
                return false;
            }

        })

    </script>
}
