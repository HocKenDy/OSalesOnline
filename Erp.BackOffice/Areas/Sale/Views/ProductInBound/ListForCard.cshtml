@model IEnumerable<ProductInboundViewModel>

@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Sale.Models
@using Erp.BackOffice.Helpers
@using GridMvc.Html

@{
    ViewBag.Title = Wording.PageIndex_ProductInBound;
    Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "ProductInbound",
        ActionName = "ListForCard",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = true,
        IsPopup = false,
        DisplayBackButton = false
    };
    IEnumerable<SelectListItem> warehouseList = (IEnumerable<SelectListItem>)ViewBag.warehouseList;

}

@if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage != "")
{
    <div class="alert alert-block alert-success">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-check green"></i>
        @ViewBag.SuccessMessage
    </div>
}

@if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
{
    <div class="alert alert-block alert-danger">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-warning red"></i>
        @ViewBag.FailedMessage
    </div>
}

<link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"> </script>

@helper GridColumnCommand(int id)
{
    @*<div class="hidden-phone visible-desktop action-buttons" style="display: inline-block; float: left;">
            <p>
                <button name="Delete" value="Delete" type="submit" class="btn btn-mini btn-danger">
                    <i class="ace-icon fa fa-trash bigger-120"></i>
                </button>
            </p>
        </div>*@

    @*<div class="hidden-phone visible-desktop" style="display: inline-block; float: left;">*@
    <a class="btn btn-sm btn-info btn-xs" href="@Url.Action("UpdateLocationItem", new { Id = id })"><i class="fa fa-map-marker"></i></a>
    @*</div>*@
    <a href="@Url.Action("Print", new { Id = id })" target="_blank" class="btn btn-primary btn-xs"><i class="fa fa-print"></i></a>
}

@helper GridColumnName(string name, int id)
{
    name = string.IsNullOrEmpty(name) ? "No Title" : name;
    <a href="@Url.Action("Detail", "ProductInbound", new { Id = id })">@name</a>
    @*<a href="javascript:;" onclick="OpenPopup('@Url.Action("View", "ProductInbound", new { Id = id, IsPopup = "true" })', 'Xem chi tiết phiếu nhập', 1000, 500)">@name</a>*@
}

@helper CheckDeleteColumns(int Id)
{
    <label>
        <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
        <span class="lbl"></span>
    </label>
}

@helper BuildCheckAll()
{
    <label>
        <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
        <span class="lbl"></span>
    </label>
}
@using (Html.BeginPageHeaderContainer(pageSetting))
{
    <p>
        @Html.TextBox("txtCode", Request["txtCode"], new {autocomplete = "off", placeholder = "Mã phiếu nhập..." })
        @*@Html.TextBox("txtProductCode", Request["txtProductCode"], new {  autocomplete = "off", placeholder = "Mã sản phẩm..." })*@
        <span class="input-daterange input-group">
            @Html.TextBox("startDate", Request["startDate"] != null ? Request["startDate"] : "", new { autocomplete = "off", placeholder = "Từ ngày" })
            <span class="input-group-addon">
                <i class="fa fa-exchange"></i>
            </span>
            @Html.TextBox("endDate", Request["endDate"] != null ? Request["endDate"] : "", new { autocomplete = "off", placeholder = "Đến ngày" })
        </span>
        @*@Html.TextBox("txtPurchaseOrder", Request["txtPurchaseOrder"], new {  autocomplete = "off", placeholder = "Mã đơn hàng..." })*@
        @*@Html.TextBox("txtWarehouseSource", Request["txtWarehouseSource"], new { @class = "form-control", autocomplete = "off", placeholder = "Nguồn..." })*@
        <select class="form-control" name="warehouseDestinationId">
            <option value="">- Kho đích đến -</option>
            @foreach (var item in warehouseList)
            {
                <option @(Request["warehouseDestinationId"] == item.Value ? "Selected" : "") value="@item.Value">@item.Text</option>
            }
        </select>
    </p>
}

@using (Html.BeginForm("Delete", "ProductInBound", FormMethod.Post))
{
    <div class="table-responsive">
        @Html.Grid(Model).Columns(columns =>
        {
            columns.Add(u => u.CreatedDate).Titled(Wording.CreatedDate).SetWidth(130).Format("{0:dd/MM/yyyy HH:mm}");
            columns.Add().Titled(Wording.Code).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Code, u.Id)).SetWidth(150);
            columns.Add(u => u.Total).Titled(Wording.TotalAmount).SetWidth(200).Sortable(true).RenderValueAs(u => Common.PhanCachHangNgan(u.Total)).Css("text-right");    
            columns.Add(u => u.WarehouseDestinationName).Titled(Wording.WarehouseDestination).SetWidth(150);
            columns.Add(u => u.ModifiedDate).Titled(Wording.ModifiedDate).SetWidth(130).Sortable(true).Format("{0:dd/MM/yyyy HH:mm}");
            columns.Add(u => u.IsArchive).Titled("TT ghi sổ").Sanitized(false).Encoded(false).RenderValueAs(n => (n.IsArchive ? "<span style=\"color:green\"><b>Đã ghi sổ</b></span>" : "<span style=\"color:red\"><b>Chưa ghi sổ</b></span>")).SetWidth(90).Sortable(true);
        }).WithPaging(20)
    </div>

    using (Html.BeginButtonContainer(pageSetting))
    {
        <a class="btn btn-mini btn-primary" href="@Url.Action("CreateCard", pageSetting.ModuleName)">
            <i class="ace-icon fa fa-plus"></i>
            @Wording.CreateNew
        </a>
    }
}

@section Scripts {
    <script type="text/javascript">
        function CheckIsval() {
            if ($('[name="DeleteId-checkbox"]').is(':checked') == false) {
                alert("Phải chọn ít nhất 1 item.");
                return false;
            }
            else {
                if (confirm('Bạn có chắc muốn xóa các item đã chọn ?')) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }

        $('[name="Delete"]').click(function () {
            if (confirm('Bạn có chắc muốn xóa item ?')) {
                $(this).closest('tr').children('td').each(function (i, e) {
                    $(this).find("input.class-delete-all").prop("checked", true);
                    return true;
                })
            }
            else {
                return false;
            }

        })

    </script>

    @Html.ScriptBottom_ValidationMvc()
    @Html.ScriptBottom_DatePicker("dd/MM/yyyy")
}