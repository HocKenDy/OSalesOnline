@model IEnumerable<ProductViewModel>

@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Sale.Models
@using Erp.BackOffice.Helpers
@using GridMvc.Html

@{
    ViewBag.Title = Wording.PageIndex_Service;
    Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "Service",
        ActionName = "Index",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = true,
        IsPopup = false,
        DisplayBackButton = false,
        AdvancedSearch = true,
        SearchOjectAttr = ViewBag.ListOjectAttrSearch
    };
}

@if (ViewBag.errors != null && ViewBag.errors != "")
{
    <div class="alert alert-block alert-success">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-check green"></i>
        @ViewBag.errors
    </div>
}

@if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
{
    <div class="alert alert-block alert-danger">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-warning red"></i>
        @ViewBag.FailedMessage
    </div>
}

<link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"> </script>

@helper GridColumnCommand(int id)
{
    <div class="hidden-phone visible-desktop action-buttons" style="display: inline-block; float: left;">
        <button name="Delete" value="Delete" type="submit" class="btn btn-mini btn-danger">
            <i class="ace-icon fa fa-trash bigger-120"></i>
        </button>
    </div>
}

@helper GridColumnName(string name, int id)
{
name = string.IsNullOrEmpty(name) ? "No Title" : name;
    <a href="@Url.Action("Edit", "Service", new { Id = id })">@name</a>
    @*<a href="javascript:;" onclick="OpenPopup('@Url.Action("Edit", "Service", new { Id = id, IsPopup = "true" })', 'Xem chi tiết dịch vụ', 1000, 500)">@name</a>*@
}

@helper GridColumnCategoryValue(object value)
{
var attr = Erp.BackOffice.Helpers.Common.GetCategoryByValueOrId("value", value);
    <span>@(attr != null ? attr.Name : "")</span>
}

@helper CheckDeleteColumns(int Id)
{
    <label>
        <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
        <span class="lbl"></span>
    </label>
}

@helper BuildCheckAll()
{
    <label>
        <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
        <span class="lbl"></span>
    </label>
}

@helper GridColumnPoint(double? targetPoint, int? point)
{
if (targetPoint > 0 && point > 0)
{
        <span>Cứ @Common.PhanCachHangNgan(targetPoint) đ/@Common.PhanCachHangNgan(point) điểm </span>
}
else
{
        <i>(Chưa thiết lập)</i>
}
}

@using (Html.BeginPageHeaderContainer(pageSetting))
{
    <p>
        @Html.TextBox("txtSearch", Request["txtSearch"], new { @class = "form-control", autocomplete = "off", placeholder = "Nhập tên..." })
        @Html.TextBox("txtCode", Request["txtCode"], new { @class = "form-control", autocomplete = "off", placeholder = "Nhập mã..." })
        <span class="input-numberic input-group">
            @Html.TextBox("txtMinPrice", Request["txtMinPrice"] != null ? Request["txtMinPrice"] : "", new { @class = "input-numberic", autocomplete = "off", placeholder = "Giá thấp nhất..." })
            <span class="input-group-addon">
                <i class="fa fa-exchange"></i>
            </span>
            @Html.TextBox("txtMaxPrice", Request["txtMaxPrice"] != null ? Request["txtMaxPrice"] : "", new { @class = "input-numberic", autocomplete = "off", placeholder = "Giá cao nhất..." })
        </span>
    </p>
}



@using (Html.BeginForm("Delete", "Product", FormMethod.Post))
{
    <div class="table-responsive">
        @Html.Grid(Model).Columns(columns =>
   {
       columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(40).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
       columns.Add(u => u.Code).Titled(Wording.Code).SetWidth(100);
       columns.Add().Titled(Wording.Name).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Name, u.Id));
       columns.Add().Titled(Wording.Unit).SetWidth(100).Sanitized(false).Encoded(false).RenderValueAs(u =>u.Unit);
       columns.Add().Titled(Wording.PriceInbound).SetWidth(100).RenderValueAs(u => Erp.BackOffice.Helpers.Common.PhanCachHangNgan(u.PriceInbound)).Css("text-right");
       columns.Add().Titled(Wording.PriceOutbound).SetWidth(100).RenderValueAs(u => Erp.BackOffice.Helpers.Common.PhanCachHangNgan(u.PriceOutbound)).Css("text-right");
       columns.Add(u => u.TargetPoint).Titled(Wording.TargetPoint).Sanitized(false).Encoded(false).RenderValueAs(n => GridColumnPoint(n.TargetPoint, n.Point)).SetWidth(200);
       columns.Add(u => u.CreatedDate).Titled(Wording.CreatedDate).SetWidth(130).Format("{0:dd/MM/yyyy HH:mm}");
       columns.Add(u => u.ModifiedDate).Titled(Wording.ModifiedDate).SetWidth(130).Sortable(true).Format("{0:dd/MM/yyyy HH:mm}");
       columns.Add(u => u.Id).Titled(Wording.Action).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCommand(u.Id)).SetWidth(85);
   }).WithPaging(10)
    </div>
    using (Html.BeginButtonContainer(pageSetting))
    {
        <a class="btn btn-mini btn-primary" href="@Url.Action("Create", pageSetting.ModuleName)">
            <i class="ace-icon fa fa-plus"></i>
            @Wording.CreateNew
        </a>
    }
}

@section Scripts {

    <script type="text/javascript">

        function CheckIsval() {
            if ($('[name="DeleteId-checkbox"]').is(':checked') == false) {
                alert("Phải chọn ít nhất 1 item.");
                return false;
            }
            else {
                if (confirm('Bạn có chắc muốn xóa các item đã chọn ?')) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }

        $('[name="Delete"]').click(function () {
            if (confirm('Bạn có chắc muốn xóa item ?')) {
                $(this).closest('tr').children('td').each(function (i, e) {
                    $(this).find("input.class-delete-all").prop("checked", true);
                    return true;
                })
            }
            else {
                return false;
            }

        })

    </script>
}