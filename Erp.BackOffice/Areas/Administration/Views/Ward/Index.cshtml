@model IEnumerable<WardViewModel>

@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Administration.Models
@using Erp.BackOffice.Helpers
@using GridMvc.Html

@{
    ViewBag.Title = "Danh sách phường, xã, thị trấn";
    bool isPopup = Request["IsPopup"] != null && Request["IsPopup"].ToString().ToLower() == "true" ? true : false;
    if (isPopup)
    {
        Layout = "~/Views/Shared/_PopupLayout.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
    }

    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "Ward",
        ActionName = StringExtention.ACTION_INDEX,
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = true,
        IsPopup = false,
        DisplayBackButton = false
    };
    int rowNumber = 0;
    int numberOfItem = 20;
    int currentPage = Request["grid-page"] != null ? Convert.ToInt32(Request["grid-page"]) : 1;
    var provinceId = Request["IsPopup"] != null && Request["IsPopup"].ToString()!= "" ? Request["IsPopup"].ToString() : "0";

    SelectList provinceList = Erp.BackOffice.Helpers.Common.GetSelectList_Location("0", provinceId);
    SelectList districtList = Erp.BackOffice.Helpers.Common.GetSelectList_Location(Request["ProvinceId"], Request["DistrictId"]);
}

<link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"> </script>

@helper GridColumnCommand(int id)
{

    <div class="hidden-phone visible-desktop action-buttons" style="display: inline-block; float: left;">
        <p>
         	@*@if (Erp.BackOffice.Filters.SecurityFilter.AccessRight(StringExtention.ACTION_EDIT, "Ward", "Administration"))
            {
                <button type="button" class="btn btn-mini btn-success" onclick="OpenPopup('@Url.Action(StringExtention.ACTION_EDIT, "Ward", new { Id = id, IsPopup=true })', 'Chỉnh sửa', 0, 0)" >
                    <i class="ace-icon fa fa-edit"></i>
                </button>
            }*@
            @if (Erp.BackOffice.Filters.SecurityFilter.AccessRight(StringExtention.ACTION_DELETE, "Ward", "Administration"))
            {
                <button name="Delete" value="Delete" type="submit" class="btn btn-mini btn-danger">
                    <i class="ace-icon fa fa-trash bigger-120"></i>
                </button>
            }
        </p>
    </div>
}

@helper GridColumnName(string name, int id, bool isPopup)
{
	name = string.IsNullOrEmpty(name) == false ? name : "No Title";
    if (!isPopup)
    {
    	if (Erp.BackOffice.Filters.SecurityFilter.AccessRight(StringExtention.ACTION_DETAIL, "Ward", "Administration"))
        {
	        <a onclick="OpenPopup('@Url.Action(StringExtention.ACTION_EDIT, "Ward", new { area = "Administration", Id = id, IsPopup = true })', 'Chi tiết', 500, 500)">
	            @name
	        </a>
    	}
    	else
    	{
    		<span>@name</span>
    	}
    }
    else
    {
        <a onclick="parent.selectItemWard(@id, '@name')">
            @name
        </a>
    }
}
@helper GridColumnHtml(string obj)
{
    <p>
        @(obj != null && obj.Length > 250 ? obj.Substring(0, 249) + ".v.v..." : obj)
    </p>
}

@helper GridColumnCategoryValue(object value)
{
    var attr = Common.GetCategoryByValueOrId("value", value);
    <span>@(attr != null ? attr.Name : "")</span>
}

@helper CheckDeleteColumns(int Id)
{
    <label>
        <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
        <span class="lbl"></span>
    </label>
}

@helper BuildCheckAll()
{
    <label>
        <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
        <span class="lbl"></span>
    </label>
}

@using (Html.BeginPageHeaderContainer(pageSetting))
{
    <p>
        <input type="hidden" value="@Request["IsPopup"]" name="IsPopup" />
        @Html.DropDownList("ProvinceId", provinceList)
        @Html.DropDownList("DistrictId", districtList)
        @Html.DropDownList("Type", SelectListHelper.GetSelectList_Category("TypeWard", Request["Type"], "value", "- Đơn vị hành chính -"))
        @Html.TextBox("Name", Request["Name"], new { autocomplete = "off", placeholder = "Tên tỉnh, thành phố..." })
    
    </p>
   
}

@if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage != "")
{
    <div class="alert alert-block alert-success">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-check green"></i>
        @ViewBag.SuccessMessage
    </div>
}

@if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
{
    <div class="alert alert-block alert-danger">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-warning red"></i>
        @ViewBag.FailedMessage
    </div>
}

@if (!isPopup)
{
    using (Html.BeginForm(StringExtention.ACTION_DELETE, pageSetting.ModuleName, FormMethod.Post))
    {
        @Html.Grid(Model).Columns(columns =>
        {
            columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
            columns.Add().Titled("STT").SetWidth(50).RenderValueAs(o =>
            {
                rowNumber++;
                return @<text> @(rowNumber + ((currentPage - 1) * numberOfItem)) </text>;
            });
            columns.Add().Titled(Wording.Province).Sanitized(false).Encoded(false).RenderValueAs(u => string.Format("{0} {1}", u.ProvinceType, u.ProvinceName));
            columns.Add().Titled(Wording.District).Sanitized(false).Encoded(false).RenderValueAs(u => string.Format("{0} {1}", u.DistrictType, u.DistrictName));
            columns.Add(u => u.Type).Titled("Loại").SetWidth(100);
            columns.Add().Titled(Wording.Name).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Name, u.Id, isPopup));
            columns.Add(u => u.CreatedDate).Titled(Wording.CreatedDate).SetWidth(130).Format("{0:dd/MM/yyyy HH:mm}");
            columns.Add(u => u.ModifiedDate).Titled(Wording.ModifiedDate).SetWidth(130).Sortable(true).Format("{0:dd/MM/yyyy HH:mm}");
            columns.Add(u => u.Id).Titled(Wording.Action).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCommand(u.Id)).SetWidth(20);
        }).WithPaging(15)
    
        using (Html.BeginButtonContainer(pageSetting))
        {
            if (Erp.BackOffice.Filters.SecurityFilter.AccessRight(StringExtention.ACTION_CREATE, "Ward", "Administration"))
            {
                <button class="btn btn-info btn-mini" onclick="OpenPopup('@Url.Action(StringExtention.ACTION_CREATE, pageSetting.ModuleName, new { IsPopup =true})', 'Thêm mới', 500, 500)" type="button">
                    <i class="ace-icon fa fa-plus"></i>
                    @Wording.CreateNew
                </button>
            }
            if (Erp.BackOffice.Filters.SecurityFilter.AccessRight(StringExtention.ACTION_DELETE, "Ward", "Administration"))
            {
                <button name="DeleteAll" value="DeleteAll" type="submit" class="btn btn-mini btn-danger" onclick="return CheckIsval();">
                    <i class="ace-icon fa fa-trash bigger-120"></i>
                    @Wording.Delete
                </button>
            }            
        }
    }
}
else
{
    @Html.Grid(Model).Columns(columns =>
    {
        //columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
        columns.Add().Titled(Html.DisplayNameFor(u => u.FirstOrDefault().Name).ToString()).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Name, u.Id, isPopup));
    }).WithPaging(10)
}

@section Scripts {
    <script type="text/javascript">
        function CheckIsval() {
            if ($('[name="DeleteId-checkbox"]').is(':checked') == false) {
                alert("Phải chọn ít nhất 1 item.");
                return false;
            }
            else {
                if (confirm('Bạn có chắc muốn xóa các item đã chọn ?')) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }

        $('[name="Delete"]').click(function () {
            if (confirm('Bạn có chắc muốn xóa item ?')) {
                $(this).closest('tr').children('td').each(function (i, e) {
                    $(this).find("input.class-delete-all").prop("checked", true);
                    return true;
                })
            }
            else {
                return false;
            }

        })

        function updateWard(id, name) {
            ClosePopup(true);
        }

    </script>

<script>
        $(function () {
            var url = '/api/BackOfficeServiceAPI/FetchLocation';
            var districts = $('#DistrictId'); // cache it

            $("#ProvinceId").change(function () {
                var id = $(this).val(); // Use $(this) so you don't traverse the DOM again
                $.getJSON(url, { parentId: id }, function (response) {
                    districts.empty(); // remove any existing options

                    $(response).each(function () {
                        $(document.createElement('option'))
                            .attr('value', this.Id)
                            .text(capitalizeFirstAllWords(this.Name.toLowerCase().replace('huyện', '').replace('quận', '')))
                            .appendTo(districts);
                    });

                    districts.trigger("chosen:updated");
                });
            });
        });
</script>
}
