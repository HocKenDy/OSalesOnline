@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Helpers
@using Erp.BackOffice.Account.Models
@using Erp.BackOffice.Sale.Models;


@model CustomerViewModel

@{
    ViewBag.Title = Wording.PageCreate_Customer;

    Layout = "~/Views/Shared/" + (Request["IsPopup"] == null ? "ACE_AdminLayout.cshtml" : "_PopupLayout.cshtml");

    SelectList genderList = Erp.BackOffice.Helpers.Common.GetSelectList_Gender(null);
    SelectList provinceList = Erp.BackOffice.Helpers.Common.GetSelectList_Location("0", null);
    SelectList districtList = Erp.BackOffice.Helpers.Common.GetSelectList_Location(Model.CityId, null);
    SelectList wardList = Erp.BackOffice.Helpers.Common.GetSelectList_Location(Model.DistrictId, null);

    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "Customer",
        ActionName = "Create",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = false,
        IsPopup = true,
        DisplayBackButton = true
    };
}

@section HeadOfPage {
    @Html.ScriptTop_ChosenStyle()
}

@using (Html.BeginPageHeaderContainer(pageSetting))
{

}
@if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
{
    <div class="alert alert-block alert-danger">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-warning red"></i>
        @ViewBag.FailedMessage
    </div>
}
@using (Html.BeginForm_AceStyle((string)ViewBag.Title, "Create", "Customer", null, FormMethod.Post, new { @class = "form-horizontal clearfix" }))
{
    <div style="margin-bottom:20px;">
        @Html.ValidationSummary(true)

        <input type="hidden" value="@Request["IsPopup"]" name="IsPopup" />
        <input type="hidden" value="@Request["IsAppend"]" name="IsAppend" />
        @Html.CustomTextboxFor(model => model.Name, null, null, WidthType.span12)
        @Html.CustomTextboxFor(model => model.Phone, null, null, WidthType.span12)
        @Html.CustomTextboxFor(model => model.Email, null, null, WidthType.span12)
        @Html.CustomDropDownListFor(model => model.Gender, genderList, WidthType.span12, false, null, DropdownListStyle.DropdownListStyleDefault)
        @Html.DateInput(model => model.Birthday,"dd/MM/yyyy","99/99/9999",true, false, WidthType.span12)
        @Html.CustomTextboxFor(model => model.Occupations, null, null, WidthType.span12)
        @Html.CustomTextAreaFor(model => model.Note, null, WidthType.span12)

        <div>
            <a class="" onclick="createProvince()" style="padding-left: 10px;">
                <i class="fa fa-plus-circle green"></i> <b>Thêm @Wording.Province</b>
            </a>
            @Html.CustomDropDownListFor(model => model.CityId, provinceList, WidthType.span12)

        </div>
        <div>
            <a class="" onclick="createDistrict()" style="padding-left: 10px;">
                <i class="fa fa-plus-circle green"></i> <b>Thêm @Wording.District</b>
            </a>
            @Html.CustomDropDownListFor(model => model.DistrictId, districtList, WidthType.span12)

        </div>
        <div>
            <a class="" onclick="createWard()" style="padding-left: 10px;">
                <i class="fa fa-plus-circle green"></i> <b>Thêm @Wording.Ward</b>
            </a>
            @Html.CustomDropDownListFor(model => model.WardId, wardList, WidthType.span12)
        </div>
        @Html.CustomTextAreaFor(model => model.Address, null, WidthType.span12)
        @Html.CustomSwitchesFor(model=> model.IsCreateCard, SwitchesStyle.CheckboxStyle,true,WidthType.span12)
        <div id="CheckCreateCard" style="@(Model.IsCreateCard == true?"":"display:none")">
            @Html.CustomDropDownListFor(model => model.MemberCardTypeId, SelectListHelper.GetSelectList_MemberCardType("", "- Loại thẻ -"), WidthType.span12, false, null, DropdownListStyle.DropdownListStyleDefault)
            @Html.CustomTextboxFor(model => model.MemberCardCode, null, null, WidthType.span12)
        </div>
    </div>


    using (Html.BeginButtonContainer(pageSetting))
    {
        <button class="btn btn-mini btn-primary" type="submit" name="Submit" value="Save" onclick="return CheckSubmit()">
            <i class="ace-icon fa fa-save"></i>
            @Wording.Save
        </button>
    }
}

@section Scripts {

    @Html.ScriptBottom_ValidationMvc()
    @Html.ScriptBottom_ChosenStyle()
    @Html.ScriptBottom_DatePicker("dd/mm/yyyy")

    <script>

        var closePopup = '@ViewBag.closePopup';

        $(document).ready(function ()
        {
            //nếu là được gọi theo dạng popup từ form thêm mới hóa đơn thì chạy đoạn code bên dưới
            if (closePopup != '')
            {
                var option = '<option value="@Model.Id" data-city="@Model.CityId" data-district="@Model.DistrictId" data-ward="@Model.WardId" data-address="/@(string.IsNullOrEmpty(Model.Address) ? "" : Model.Address)/" data-phone="@Model.Phone">@Model.Name</option>';
                window.parent.ClosePopupAndDoSomethings(option);
            }

            $("[name='Birthday']").mask('99/99/9999');
            $('#Point').numberFormat();
            $('#IsCreateCard').change(function ()
            {
                var $this = $(this);
                if($this.is(":checked") == true)
                {
                    $('#IsCreateCard').val("True");
                    $('#CheckCreateCard').show();
                }
                else
                {
                    $('#IsCreateCard').val("False");
                    $('#CheckCreateCard').hide();
                }
            });
        });
        
        function CheckSubmit()
        {
            var mes = "";
            if($('#IsCreateCard').val() == "True")
            {
                if($('#MemberCardTypeId').val() =='')
                {
                    mes += "Chọn loại thẻ </br>";
                }
                if ($('#MemberCardCode').val() == '')
                {
                    mes += "Chọn nhập mã thẻ </br>";
                }
            }
            if(mes != "")
            {
                alertPopup('Lỗi!', mes, 'error');
                return false;
            }
            return true;
        }

        $(function ()
        {
            var url = '/api/BackOfficeServiceAPI/FetchLocation';
            var districts = $('#DistrictId'); // cache it
            var ward = $('#WardId');

            $("#CityId").change(function ()
            {
                var id = $(this).val(); // Use $(this) so you don't traverse the DOM again
                $.getJSON(url, { parentId: id }, function (response)
                {
                    districts.empty(); // remove any existing options
                    ward.empty();
                    $(document.createElement('option'))
                            .attr('value', '')
                            .text('- Rỗng -')
                            .appendTo(ward);
                    $(response).each(function ()
                    {
                        $(document.createElement('option'))
                            .attr('value', this.Id)
                            .text(capitalizeFirstAllWords(this.Name.toLowerCase().replace('huyện', '').replace('quận', '')))
                            .appendTo(districts);
                    });

                    districts.trigger("chosen:updated");
                });
            });

            districts.change(function ()
            {
                var id = $(this).val(); // Use $(this) so you don't traverse the DOM again
                $.getJSON(url, { parentId: id }, function (response)
                {
                    ward.empty(); // remove any existing options
                    $(response).each(function ()
                    {
                        $(document.createElement('option'))
                            .attr('value', this.Id)
                            .text(capitalizeFirstAllWords(this.Name.toLowerCase()))
                            .appendTo(ward);
                    });
                    ward.trigger("chosen:updated");
                });
            });
        });

        function createProvince()
        {
            OpenPopup('/AdProvince/Create?IsPopup=true', 'Thêm mới', 0, 0);
        }
        function createDistrict()
        {
            var cityId = $("#CityId").val();
            OpenPopup('/District/Create?IsPopup=true&ProvinceId=' + cityId, 'Thêm mới', 0, 0);
        }
        function createWard()
        {
            var cityId = $("#CityId").val();
            var DistrictId = $("#DistrictId").val();
            OpenPopup('/Ward/Create?IsPopup=true&ProvinceId=' + cityId + '&DistrictId=' + DistrictId, 'Thêm mới', 0, 0);
        }

        function updateProvince(id, name)
        {
            var _city = $("#CityId");
            $(document.createElement('option'))
                           .attr('value', id)
                           .text(name)
                           .appendTo(_city).trigger('chosen:updated');
            _city.val(id);
            ClosePopup(false);
        }
        function updateDistrict(id, name)
        {
            var _District = $("#DistrictId");
            $(document.createElement('option'))
                           .attr('value', id)
                           .text(name)
                           .appendTo(_District).trigger('chosen:updated');
            _District.val(id);
            ClosePopup(false);
        }
        function updateWard(id, name)
        {
            var _Ward = $("#WardId");
            $(document.createElement('option'))
                           .attr('value', id)
                           .text(name)
                           .appendTo(_Ward).trigger('chosen:updated');
            _Ward.val(id);
            ClosePopup(false);
        }
    </script>
}
