@model IQueryable<TaskViewModel>

@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Crm.Models
@using Erp.BackOffice.Helpers
@using GridMvc.Html

@{
    ViewBag.Title = Wording.PageIndex_Task;
    bool isPopup = Request["popup"] != null && Request["popup"].ToString().ToLower() == "true" ? true : false;
    if (isPopup)
    {
        Layout = "~/Views/Shared/_PopupLayout.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
    }
    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "Task",
        ActionName = "Index",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = true,
        IsPopup = false,
        DisplayBackButton = false
    };
}
@using (Html.BeginPageHeaderContainer(pageSetting))
{
    <p>
        <span class="input-daterange input-group">
            @Html.TextBox("startDate", Request["startDate"] != null ? Request["startDate"] : "", new { @class = "form-control", autocomplete = "off", placeholder = "Từ ngày" })
            <span class="input-group-addon">
                <i class="fa fa-exchange"></i>
            </span>
            @Html.TextBox("endDate", Request["endDate"] != null ? Request["endDate"] : "", new { @class = "form-control", autocomplete = "off", placeholder = "Đến ngày" })
        </span>
    </p>
}
@helper GridColumnStatusName(string status)
{
    switch (status)
    {
        case "pending":
            <span class="label label-info">@Wording.RequestInboundStatus_new</span>
            break;
        case "inprogress":
        <span class="label label-warning">@Wording.RequestInboundStatus_inprogress</span>
            break;
        case "completed":
        <span class="label label-warning">@Wording.RequestInboundStatus_wait_shipping</span>
            break;
        case "cancel":
        <span class="label label-warning">@Wording.RequestInboundStatus_shipping</span>
            break;
    }
}
@if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage != "")
{
    <div class="alert alert-block alert-success">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-check green"></i>
        @ViewBag.SuccessMessage
    </div>
}

@if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
{
    <div class="alert alert-block alert-danger">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-warning red"></i>
        @ViewBag.FailedMessage
    </div>
}
<style>
    .popover {
        max-width: 350px !important;
    }
</style>
<link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"> </script>

@helper GridColumnCommand(int id, string note, string status)
{
    //var icon = " <i class=\"ace-icon fa fa-info-circle bigger-120\" style=\"color:#6FB3E0\"></i>";
    var aaa = "";
    foreach (var item in SelectListHelper.GetSelectList_Category("task_status", null, "Value", null))
    {
        if (item.Text == status)
        {
            aaa += "<option selected=\"\" value=\"" + item.Value + "\">" + item.Text + "</option>";
        }
        else
        { 
             aaa += "<option value=\"" + item.Value + "\">" + item.Text + "</option>";
        }
    }
    var datacontent = "<div class=\"row\">"
                       + "<p><label>Trạng thái</label><select id=\"Status_" + id + "\" class=\"col-sm-12 chzn-select\">"
                       + aaa
                       + "</select></p></div>"
                       + "<div class=\"row\"><label>Ghi chú</label><textarea id=\"Note_" + id + "\"class=\"autosize-transition form-control\""
                       + "style=\"overflow: hidden; word-wrap: break-word; resize: horizontal; height:100px; width:330px; max-width:350px; \" value=\"" + note + "\">" + note + "</textarea></div>"
                       + "<div class=\"row\">"
                       +"<button name=\"Edit\" class=\"btn btn-mini btn-danger top-5 pull-right\" onclick=\"EditNote()\">"
                       + "<i class=\"ace-icon fa fa-remove bigger-120\"></i>Đóng</button>"
                       +"<button name=\"Success\" class=\"btn btn-mini btn-success top-5 pull-right\" onclick=\"UpdateNote(" + id + ")\">"
                       + "<i class=\"ace-icon fa fa-refresh bigger-120\"></i>Cập nhật</button></div>";
        <p>
            <a class="btn btn-success btn-mini popover-info" data-rel="popover" data-placement="left" title="" data-content="@(datacontent)" data-original-title="Thông tin cập nhật"><i class="fa fa-edit"></i></a>

      <button name="Delete" value="Delete" type="submit" class="btn btn-mini btn-danger">
                <i class="ace-icon fa fa-trash bigger-120"></i>
            </button>
        </p>

}

@helper GridColumnName(string name, int id, bool isPopup)
{
    if (isPopup)
    {
        <a onclick="parent.selectBranchItem(@id)">@name</a>
    }
    else
    {

        name = string.IsNullOrEmpty(name) ? "No Title" : name;
        <a href="@Url.Action("edit", "Task" , new { Id= id })">@name</a>

        @*<button type="button" class="btn btn-minier btn-info popover" data-toggle="popover" data-html="true" title="@icon Ghi chú" data-content="@(datacontent)"><i class="ace-icon fa fa-info"></i></button>*@
    }
}

@helper GridColumnCategoryValue(object value)
{
    var attr = Erp.BackOffice.Helpers.Common.GetCategoryByValueOrId("value", value);
    <span>@(attr != null ? attr.Name : "")</span>
}

@helper CheckDeleteColumns(int Id)
{
    <label>
        <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
        <span class="lbl"></span>
    </label>
}

@helper BuildCheckAll()
{
    <label>
        <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
        <span class="lbl"></span>
    </label>
}

@if (!isPopup)
{
    //using (Html.BeginForm("Delete", "Task", FormMethod.Post))
    //{
    @Html.Grid(Model).Columns(columns =>
        {
            columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
            columns.Add(u => u.Status).Titled(Wording.Status).SetWidth(100).Sortable(true);
            columns.Add(u => u.Subject).Titled(Wording.Subject).Sortable(true).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Subject, u.Id, isPopup));
            //columns.Add(u => u.CreatedUserId).Titled(Wording.CreatedUserId).SetWidth(100).RenderValueAs(u => u.CreatedUserName);
            columns.Add(u => u.CreatedDate).Titled(Wording.CreatedDate).SetWidth(100);
            //columns.Add(u => u.ModifiedUserId).Titled(Html.DisplayNameFor(u => u.FirstOrDefault().ModifiedUserId).ToString()).SetWidth(100).RenderValueAs(u => u.ModifiedUserName);
            columns.Add(u => u.ModifiedDate).Titled(Wording.ModifiedDate).SetWidth(100).Sortable(true);
            columns.Add(u => u.Id).Titled("").Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCommand(u.Id, u.Note, u.Status)).SetWidth(20);
        }).WithPaging(10)
    using (Html.BeginButtonContainer(pageSetting))
    {
        <a class="btn btn-mini btn-primary" href="@Url.Action("Create", pageSetting.ModuleName)">
            <i class="ace-icon fa fa-plus"></i>
            @Wording.CreateNew
        </a>
        <button class="btn btn-mini btn-danger" type="submit" name="DeleteAll" value="DeleteAll" onclick="return CheckIsval();">
            <i class="ace-icon fa fa-trash"></i>
            @Wording.Delete
        </button>
    }
    //}

}
else
{
    @Html.Grid(Model).Columns(columns =>
    {
        //columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
        columns.Add().Titled(Html.DisplayNameFor(u => u.FirstOrDefault().Subject).ToString()).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Subject, u.Id, isPopup));
    }).WithPaging(10)
}

@section Scripts {
    <script type="text/javascript">
        function CheckIsval() {
            if ($('[name="DeleteId-checkbox"]').is(':checked') == false) {
                alert("Phải chọn ít nhất 1 item.");
                return false;
            }
            else {
                if (confirm('Bạn có chắc muốn xóa các item đã chọn ?')) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }

        $('[name="Delete"]').click(function () {
            if (confirm('Bạn có chắc muốn xóa item ?')) {
                $(this).closest('tr').children('td').each(function (i, e) {
                    $(this).find("input.class-delete-all").prop("checked", true);
                    return true;
                })
            }
            else {
                return false;
            }

        })
        $(document).ready(function () {
            $('[data-rel=popover]').popover({ html: true });
        });
        function UpdateNote(Id) {
            var note = $("#Note_" + Id).val();
            var status = $("#Status_" + Id).val();

            $.ajax({
                url: '/Task/UpdateNote',
                type: 'GET',
                data: { Id: Id, note: note, status: status },
                success: function (res) {
                    if (res == "success") {
                        alertPopup("Thông báo", "Cập nhật ghi chú thành công! Trang web sẽ tự động load lại sau 2s", "success");
                        setInterval(function () {
                            window.location.reload();
                        }, 2000);
                    } else {
                        alertPopup("Lỗi", "Cập nhật ghi chú thất bại!", "danger");
                    }
                }
            });

        };
        function EditNote() {
            $('[data-rel=popover]').popover('hide');
        }
        //function Create() {
        //    $('[data-rel=popover]').popover('show');
        //}
    </script>
    @Html.ScriptBottom_ValidationMvc()
    @Html.ScriptBottom_DatePicker("dd/mm/yyyy")
    @Html.ScriptBottom_ChosenStyle()
}
